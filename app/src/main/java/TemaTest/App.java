/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;
import java.util.ArrayList;
import java.util.Collections;
import java.time.LocalDateTime;
import javax.annotation.Syntax;
import java.util.Comparator;

import org.checkerframework.checker.units.qual.s;

import com.google.common.collect.Streams;

public class App {
    static ArrayList<Utilizator> utilizatori = new ArrayList<Utilizator>();
    static int Totid = 1;
    static int id_Com = 1;
public App() {/* compiled code */}

    public static void main(java.lang.String[] strings) {

        if (strings == null) {
            System.out.println("Hello world!");
            return;
        }

        if (strings[0].equals("-cleanup-all")) {
            utilizatori.clear();
            Totid = 1;
            id_Com = 1;
        }
        
        if (strings[0].equals("-create-user")) {
            if (strings.length == 1)
                System.out.println("{ 'status' : 'error', 'message' : 'Please provide username'}");
            
            if (strings.length == 2)
                System.out.println("{ 'status' : 'error', 'message' : 'Please provide password'}");
        
            if (strings.length == 3) {
                int find = 0;

                for (int j = 0; j < utilizatori.size() && find == 0; j++) {
                    String username = strings[1];
                    username =  username.substring(4, username.length() - 1);
                    
                    if (utilizatori.get(j).getNume().equals(username)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'User already exists'}");
                        find = 1;
                    }
                }
                if (find == 0) {
                    String username = strings[1];
                    String password = strings[2];
                    username =  username.substring(4, username.length() - 1);
                    password =  password.substring(4, password.length() - 1);
                    Utilizator utilizator = new Utilizator(username, password);
                    utilizatori.add(utilizator);
                    System.out.println("{ 'status' : 'ok', 'message' : 'User created successfully'}");
                }
            }
        }

        if (strings[0].equals("-create-post")) {
            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
        
            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                    String username = strings[1];
                    String password = strings[2];
                    username =  username.substring(4, username.length() - 1);
                    password =  password.substring(4, password.length() - 1);


                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                return;
            }

            String text = strings[3];
            text =  text.substring(7, text.length() - 1);

            if (text.length() > 300) {
                System.out.println("{ 'status' : 'error', 'message' : 'Post text length exceeded'}");
                return;
            }
            
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                username =  username.substring(4, username.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    break;
                }
            }
            String username = strings[1];
            username =  username.substring(4, username.length() - 1);
            Postare postare = new Postare(text, Totid++, username);
            utilizatori.get(i).addPostare(postare);
            System.out.println("{ 'status' : 'ok', 'message' : 'Post added successfully'}");
        }

        if (strings[0].equals("-delete-post-by-id")) {

            if(strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                    String username = strings[1];
                    String password = strings[2];
                    username =  username.substring(4, username.length() - 1);
                    password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }

            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                username =  username.substring(4, username.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) { // verific daca exista utilizatorul si parola
                    break;
                }
            }
            String strId = strings[3];
            strId =  strId.substring(5, strId.length() - 1);
            int id = Integer.parseInt(strId);

            if (utilizatori.get(i).findID(id) == false) {  // verific daca exista id-ul tb modificat
                System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                return;
            } else {
                utilizatori.get(i).deletePostare(id);
                System.out.println("{ 'status' : 'ok', 'message' : 'Post deleted successfully'}");
            }
        }

        if (strings[0].equals("-follow-user-by-username")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                    String username = strings[1];
                    String password = strings[2];
                    username =  username.substring(4, username.length() - 1);
                    password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No username to follow was provided'}");
                return;
            }

            String username = strings[3];
            username =  username.substring(11, username.length() - 1);
            find = 0;
            
            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    break;
                }
            }
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}");
                return;
            }

            for (i = 0; i < utilizatori.size(); i++) {
                String username1 = strings[1];
                username1 =  username1.substring(4, username1.length() - 1);  // verific daca exista utilizatorul si parola
                if (utilizatori.get(i).getNume().equals(username1)) {
                    break;
                }
            }
            if (utilizatori.get(i).findPrieten(username) == true) {
                System.out.println("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}");
                return;
            }
            utilizatori.get(i).addPrieten(username);
            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
        }

        if (strings[0].equals("-unfollow-user-by-username")) {
            
            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            
            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No username to unfollow was provided'}");
                return;
            }

            String username = strings[1];
            String unfollow = strings[3];
            unfollow =  unfollow.substring(11, unfollow.length() - 1);
            username =  username.substring(4, username.length() - 1);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).getNume().equals(username)) {
                    break;
                }
            }
            if (utilizatori.get(i).findPrieten(unfollow) == false) {
                System.out.println("{ 'status' : 'error', 'message' : 'The username to unfollow was not valid'}");
                return;
            } else {
                utilizatori.get(i).deletePrieten(unfollow);
                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
            }
        }

        if (strings[0].equals("-like-post")) {
            
            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            
            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to like was provided'}");
                return;
            }

            String username = strings[1];
            username =  username.substring(4, username.length() - 1);
            String strId = strings[3];
            strId =  strId.substring(10, strId.length() - 1);
            int id = Integer.parseInt(strId);

            
            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).findID(id) == true) {
                    if (utilizatori.get(i).getNume().equals(username)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}"); // Nu iti poti da like la postarea ta
                        return;
                    }
                        if (utilizatori.get(i).addPostLike(id, username) == true) {
                            System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            return;
                        } else 
                            return;
                }
            }
            System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");
        }

        if (strings[0].equals("-unlike-post")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }
            
            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to unlike was provided'}");
                return;
            }

            String username = strings[1];
            username =  username.substring(4, username.length() - 1);
            String strId = strings[3];
            strId =  strId.substring(10, strId.length() - 1);
            int id = Integer.parseInt(strId);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).findID(id) == true) {
                    if (utilizatori.get(i).getNume().equals(username)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}"); // Nu iti poti da unlike la postarea ta
                        return;
                    }
                    if (utilizatori.get(i).deletePostLiked(id, username) == true) {
                        System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                        return;
                    } else 
                        return;
                }
            }
            System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}");
        }

        if (strings[0].equals("-comment-post")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                return;
            }

            String text = strings[4];
            text =  text.substring(7, text.length() - 1);
            if (text.length() > 300) {
                System.out.println("{ 'status' : 'error', 'message' : 'Comment text length exceeded'}");
                return;
            }

            String username = strings[1];
            username =  username.substring(4, username.length() - 1);
            String id_post = strings[3];
            id_post =  id_post.substring(10, id_post.length() - 1);
            int id = Integer.parseInt(id_post);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).findID(id) == true) {
                    Comentariu comentariu = new Comentariu(text, id_Com++, username);
                    utilizatori.get(i).add_COMMENT_IN_VEC(id, comentariu);
                    System.out.println("{ 'status' : 'ok', 'message' : 'Comment added successfully'}");
                    return;
                }
            }

        }

        if (strings[0].equals("-delete-comment-by-id")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                return;
            }

            String username = strings[1];
            username =  username.substring(4, username.length() - 1);
            
            String strId = strings[3];
            strId =  strId.substring(5, strId.length() - 1);
            int id = Integer.parseInt(strId);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).exist_id_comment(id) != null) {
                    String user = utilizatori.get(i).exist_id_comment(id);
                    String[] list_users = user.split(" ");
                    
                    if (username.equals(list_users[0]) || username.equals(list_users[1])) {
                        utilizatori.get(i).removeComment(id);
                        System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                        return;
                    }
                    System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                    return;
                }
            }
            System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
        }

        if (strings[0].equals("-get-following")) {
                
                if (strings.length < 3) {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                    return;
                }
                
                int i, find = 0;
                for (i = 0; i < utilizatori.size(); i++) {
                    String username = strings[1];
                    String password = strings[2];
                    username =  username.substring(4, username.length() - 1);
                    password =  password.substring(4, password.length() - 1);
                    if (utilizatori.get(i).getNume().equals(username)) {
                        find = 1;
                        if (!utilizatori.get(i).getParola().equals(password)) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                        return;
                        }
                    }
                }
                if (find == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                }

                String username = strings[1];
                username =  username.substring(4, username.length() - 1);

                for (i = 0; i < utilizatori.size(); i++) {
                    if (utilizatori.get(i).getNume().equals(username)) {
                        break;
                    }
                }
                
                utilizatori.get(i).afisPrietenii();

                
    
        }

        if (strings[0].equals("-get-followers")) {
                    
            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
                
            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }

            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No username to list followers was provided'}");
                return;
            }

            String username = strings[3];
            username =  username.substring(11, username.length() - 1);
            find = 0;
            String list = "";
            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).afisUrmaritori(username) != null) {
                    list = list + "'" + utilizatori.get(i).getNume() + "', ";
                    find = 1;
                }
            }
            
            if (find == 1) {
                list = list.substring(0, list.length() - 2);
                System.out.print("{ 'status' : 'ok', 'message' : [ ");
                System.out.print(list);
                System.out.print("]}");
                return;
            }
            System.out.print("{ 'status' : 'error', 'message' : 'The username to list followers was not valid'}");
        }
    
        if (strings[0].equals("-get-most-liked-posts")) {
            
            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }
            
            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }


            ArrayList<Postare> postari = new ArrayList<Postare>();

            for (i = 0; i < utilizatori.size(); i++) {
                ArrayList<Postare> top = utilizatori.get(i).get_top_5_postari_like();
                postari.addAll(top);
            }

            Collections.sort(postari, new Comparator<Postare>() {
                @Override
                public int compare(Postare o1, Postare o2) {
                    return o2.getNumarLikeuri() - o1.getNumarLikeuri();
                }
            });

            System.out.print("{ 'status' : 'ok', 'message' : [");

            for (i = 0; i < postari.size() && i < 5; i++) {
                System.out.print("{ 'post_id' : '" + postari.get(i).getId() + "', 'post_text' : '" + postari.get(i).getText() +
                 "', 'post_date' : '" + postari.get(i).getCurrentDateAsString() + "', 'username' : '" + postari.get(i).getAutor() + "', 'number_of_likes' : '" + 
                 postari.get(i).getNumarLikeuri() + "'}");
                
                 if (i < postari.size() - 1 && i < 4) {
                     System.out.print(",");
                 }
            
            }
            System.out.print(" ]}");
        
        }

        if (strings[0].equals("-get-most-commented-posts")) {
            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return;
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
                if (find == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                }

 
            

               ArrayList<Postare> postari = new ArrayList<Postare>();
                for (i = 0; i < utilizatori.size(); i++) {
                    ArrayList<Postare> top = utilizatori.get(i).get_top_5_postari_comment();
                    postari.addAll(top);
                }

                Collections.sort(postari, new Comparator<Postare>() {
                    @Override
                    public int compare(Postare o1, Postare o2) {
                        return o2.getNumarComentarii() - o1.getNumarComentarii();
                    }
                });

                 i = 0;
                 String aux = "";
                System.out.print("{ 'status' : 'ok', 'message' : [");
                while (i < postari.size() && i < 5) {
                    aux = aux + "{ 'post_id' : '" + postari.get(i).getId() + "', 'post_text' : '" + postari.get(i).getText() +
                     "', 'post_date' : '" + postari.get(i).getCurrentDateAsString() + "', 'username' : '" + postari.get(i).getAutor() + "', 'number_of_comments' : '" + 
                     postari.get(i).getNumarComentarii() + "'},";
                    i++;
                }
                aux = aux.substring(0, aux.length() - 1);
                System.out.print(aux);
                System.out.print("]}");
            
            
        }

        if (strings[0].equals("-like-comment")) {
            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return; 
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) {
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) { // verific daca exista utilizatorul si parola
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            
            if (find == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to like was provided'}");
                return;
            }

            String username = strings[1];
            username =  username.substring(4, username.length() - 1);

            String strId = strings[3];
            strId =  strId.substring(13, strId.length() - 1);
            int id = Integer.parseInt(strId);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).exist_id_comment(id) != null) {
                    String user = utilizatori.get(i).exist_id_comment(id);
                    String[] list_users = user.split(" ");
                    
                    if (username.equals(list_users[1])) {
                        System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                        return;
                    }
                    if (utilizatori.get(i).findUserLike(id, username) == true) {
                        System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                        return;
                    }

                    utilizatori.get(i).addLike(id, username);
                    System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                    return;
                }
            }
            System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
        }

        if (strings[0].equals("-unlike-comment")) {
            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return; 
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) { // verific daca exista utilizatorul si parola
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            
            if (find == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to unlike was provided'}");
                return;
            }

            String username = strings[1];
            username =  username.substring(4, username.length() - 1);

            String strId = strings[3];
            strId =  strId.substring(13, strId.length() - 1);
            int id = Integer.parseInt(strId);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).exist_id_comment(id) != null) {
                    String user = utilizatori.get(i).exist_id_comment(id);
                    String[] list_users = user.split(" ");
                    
                    if (username.equals(list_users[1])) {
                        System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
                        return;
                    }
                    if (utilizatori.get(i).findUserLike(id, username) == false) {
                        System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
                        return;
                    }

                    utilizatori.get(i).removeLike(id, username);
                    System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                    return;
                }
            }
            
            System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
        } 
        
        if (strings[0].equals("-get-user-posts")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return; 
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username = strings[1];
                String password = strings[2];
                username =  username.substring(4, username.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username)) { // verific daca exista utilizatorul si parola
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }
            
            if (find == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No username to list posts was provided'}");
                return;
            }

            String username_to_follow = strings[3];
            username_to_follow =  username_to_follow.substring(11, username_to_follow.length() - 1);
            String username = strings[1];
            username =  username.substring(4, username.length() - 1);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).getNume().equals(username)) {
                    break;
                }
            }
            if (utilizatori.get(i).findPrieten(username_to_follow) == true) {
                for (int j = 0; j < utilizatori.size(); j++) {
                    if (utilizatori.get(j).getNume().equals(username_to_follow)) {
                        utilizatori.get(j).afisPostari();
                        return;
                    }
                }
            }

            System.out.print("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
        }
        
        if (strings[0].equals("-get-post-details")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return; 
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username1 = strings[1];
                String password = strings[2];
                username1 =  username1.substring(4, username1.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username1)) { // verific daca exista utilizatorul si parola
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }

            if (find == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
            }

            if (strings.length == 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'No post identifier was provided'}");
                return;
            }

            String username = strings[1];
            username =  username.substring(4, username.length() - 1);
            String strId = strings[3];
            strId =  strId.substring(10, strId.length() - 1);
            int id = Integer.parseInt(strId);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).findID(id) == false) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The post identifier was not valid'}");
                    return;
                } else {
                    utilizatori.get(i).afisPostare(id);
                    return;
                }
            }

        }
        
        if (strings[0].equals("-get-followings-posts")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return; 
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username1 = strings[1];
                String password = strings[2];
                username1 =  username1.substring(4, username1.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username1)) { // verific daca exista utilizatorul si parola
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }

            if (find == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
            }

            String username = strings[1];
            username =  username.substring(4, username.length() - 1);

            for (i = 0; i < utilizatori.size(); i++) {
                if (utilizatori.get(i).getNume().equals(username)) {
                    break;
                }
            }

            ArrayList<String> prieteni = utilizatori.get(i).getPrieteni();
            if (prieteni.size() == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'No posts to show'}");
                return;
            }

            System.out.print("{ 'status' : 'ok', 'message' : [");
            for (i = utilizatori.size() - 1; i >= 0; i--) {
                for (int j = 0; j < prieteni.size(); j++) {
                    if (utilizatori.get(i).getNume().equals(prieteni.get(j))) { // fix the afisare
                        utilizatori.get(i).afisPostariPrieteni();
                        if (j != 0) {
                            System.out.print(",");
                        }
                    }
                }
            }
            System.out.print("]}");

        }

        if (strings[0].equals("-get-most-followed-users")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return; 
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username1 = strings[1];
                String password = strings[2];
                username1 =  username1.substring(4, username1.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username1)) { // verific daca exista utilizatorul si parola
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }

            if (find == 0) {
                System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                return;
            }

            ArrayList<String> prieteni = new ArrayList<String>();

            for (i = 0; i < utilizatori.size(); i++) {
                prieteni = utilizatori.get(i).getPrieteni();
                
                for (int j = 0; j < prieteni.size(); j++) {
                    for (int k = 0; k < utilizatori.size(); k++) {
                        if (utilizatori.get(k).getNume().equals(prieteni.get(j))) {
                            utilizatori.get(k).incNrUrmaritori();
                        }
                    }
                }
            }

            Collections.sort(utilizatori, new Comparator<Utilizator>() {
                @Override
                public int compare(Utilizator o1, Utilizator o2) {
                    return o2.getNumarUrmaritori() - o1.getNumarUrmaritori();
                }
            });

            System.out.print("{ 'status' : 'ok', 'message' : [");
            for (i = 0; i < utilizatori.size() && i < 5; i++) {
                System.out.print("{'username' : '" + utilizatori.get(i).getNume() + "','number_of_followers' : '" +
                utilizatori.get(i).getNumarUrmaritori() + "'}");
                if (i != utilizatori.size() - 1 && i != 4) {
                    System.out.print(",");
                }
            }
            System.out.print(" ]}");

        }

        if (strings[0].equals("-get-most-liked-users")) {

            if (strings.length < 3) {
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                return; 
            }

            int i, find = 0;
            for (i = 0; i < utilizatori.size(); i++) {
                String username1 = strings[1];
                String password = strings[2];
                username1 =  username1.substring(4, username1.length() - 1);
                password =  password.substring(4, password.length() - 1);
                if (utilizatori.get(i).getNume().equals(username1)) { // verific daca exista utilizatorul si parola
                    find = 1;
                    if (!utilizatori.get(i).getParola().equals(password)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
                    }
                }
            }

            if (find == 0) {
                    System.out.print("{ 'status' : 'error', 'message' : 'Login failed'}");
                    return;
            }
        
            for (i = 0; i < utilizatori.size(); i++) {
                int sum = 0;
                sum += utilizatori.get(i).getNrLikePostari();
                for (int j = 0; j < utilizatori.size(); j++) {
                    sum = sum + utilizatori.get(j).getNrLikeComentarii(utilizatori.get(i).getNume());
                }
                utilizatori.get(i).setNumarLikeuri(sum);
            }

            Collections.sort(utilizatori, new Comparator<Utilizator>() {
                @Override
                public int compare(Utilizator o1, Utilizator o2) {
                    return (o2.getNumarLikeuri() - o1.getNumarLikeuri());
                }
            });
            
            System.out.print("{ 'status' : 'ok', 'message' : [");

            for (i = 0; i < utilizatori.size() && i < 5; i++) {
                System.out.print("{'username' : '" + utilizatori.get(i).getNume() + "','number_of_likes' : '" +
                utilizatori.get(i).getNumarLikeuri() + "'}");
                if (i != utilizatori.size() - 1 && i != 4) {
                    System.out.print(",");
                }
            }
            System.out.print("]}");
        }
    }
}